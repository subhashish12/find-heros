{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","hero","id","alt","name","email","CardList","console","log","Heros","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","message","fetch","then","resp","json","res","this","filterdHeros","filter","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"2UAKaA,G,YAAO,SAACC,GACnB,OACE,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,iCAA4BF,EAAMG,KAAKC,GAAvC,0BAAmEC,IAAI,KAC/E,gCAAOL,EAAMG,KAAKG,KAAlB,MACA,2BAAKN,EAAMG,KAAKI,UCLTC,EAAW,SAACR,GAEvB,OADAS,QAAQC,IAAI,QAASV,GACd,yBAAKC,UAAU,aAAf,MACLD,EAAMW,MAAMC,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAMU,IAAKV,EAAKC,GAAID,KAAMA,SCNnBW,G,YAAY,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aACtC,OAAO,2BACLf,UAAU,SACVgB,KAAK,SACLF,YAAaA,EACbG,SAAWF,MC6CAG,E,kDA/Cb,aAAc,IAAD,8BACX,gBAUFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SATtC,EAAKC,MAAO,CACVC,QAAS,cACTf,MAAO,GACPW,YAAY,IANH,E,gEAgBO,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GACJ,OAAOA,EAAKC,UAEbF,MAAK,SAAAG,GACJ,EAAKV,SAAS,CAAEV,MAAQoB,S,+BAIlB,IAAD,EACuBC,KAAKP,MAA3Bd,EADD,EACCA,MAAOW,EADR,EACQA,YACTW,EAAgBtB,EAAMuB,QAAO,SAAA/B,GACjC,OAAOA,EAAKG,KAAK6B,cAAcC,SAASd,EAAYe,wBAGtD,OACE,yBAAKpC,UAAU,OACb,+CACA,kBAAC,EAAD,CACEc,YAAY,cACZC,aAAiBgB,KAAKhB,eAExB,kBAAC,EAAD,CAAUL,MAASsB,S,GAxCTK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAM7B,c","file":"static/js/main.70bab65f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\n\r\n\r\nexport const Card = (props)=>{\r\n  return (\r\n    <div className='card-container'>\r\n      <img src={`https://robohash.org/sa${props.hero.id}?set=set3&size=180x180`} alt=\"\"/>\r\n      <h2> { props.hero.name }  </h2>\r\n      <p>{ props.hero.email}</p>\r\n    </div>\r\n       \r\n  )\r\n}","import React from 'react';\r\nimport  './card-list.styles.css'\r\nimport { Card } from '../card/card.component';\r\n\r\n\r\nexport const CardList = (props)=>{\r\n  console.log('props', props)\r\n  return <div className='card-list'>   {\r\n    props.Heros.map((hero)=> \r\n      <Card key={hero.id} hero={hero}/>\r\n    )\r\n  }</div>\r\n} ","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange})=>{\r\n  return <input \r\n    className='search'\r\n    type=\"search\" \r\n    placeholder={placeholder} \r\n    onChange= {handleChange} />\r\n\r\n}","import React, { Component } from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport './App.css';\nimport { SearchBox } from  './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state ={\n      message: 'Hello World',\n      Heros: [],\n      searchField:''\n    }\n\n  }\n\n  handleChange = (e)=>{\n    this.setState({ searchField: e.target.value});\n  }\n\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(resp=>{\n      return resp.json()\n    })\n    .then(res=>{\n      this.setState({ Heros : res})\n    })\n  }\n\n  render() {\n    const { Heros, searchField} = this.state;\n    const filterdHeros =  Heros.filter(hero=>{\n      return hero.name.toLowerCase().includes(searchField.toLocaleLowerCase());\n    })\n\n    return (\n      <div className=\"App\">\n        <h1>Find Your Heros</h1>\n        <SearchBox\n          placeholder='Search Hero' \n          handleChange = { this.handleChange } \n        />\n        <CardList Heros = {filterdHeros}>\n        </CardList>\n      </div>\n    )\n   \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}